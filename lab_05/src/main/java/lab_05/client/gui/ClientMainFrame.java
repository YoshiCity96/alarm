/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab_05.client.gui;

import lab_05.client.Client;
import lab_05.controllers.GUI_Controller;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.Component;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import lab_05.server.Request;
import lab_05.server.RequestsPool;

/**
 *
 * @author AlibekovMurad5202
 */
public class ClientMainFrame extends javax.swing.JFrame {
    int clocksCount = 0;
    Thread t;
    Socket socket;
    
    InputStream is;
    DataInputStream dis;
    
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    
    public ClientMainFrame() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        clockHM = new lab_05.client.gui.ClockHMPanel();
        clockHMS = new lab_05.client.gui.ClockHMSPanel();
        Connect = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AlarmClocks");
        setName("mainFrame"); // NOI18N

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(jPanel1);

        jToggleButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jToggleButton1.setText("Set new CLockHM");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jToggleButton2.setText("Set new CLockHMS");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        Connect.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Connect.setText("Connect");
        Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(clockHM, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jToggleButton1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jToggleButton2)
                                    .addComponent(clockHMS, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(Connect, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clockHMS, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clockHM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton1))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Connect)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (t != null) {
            GUI_Controller.event(0, clocksCount, clockHM.getH(), clockHM.getM(), 0);
            clocksCount++;
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        if (t != null) {
            GUI_Controller.event(1, clocksCount, clockHMS.getH(), clockHMS.getM(), clockHMS.getS());
            clocksCount++;
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectActionPerformed
        socket = Client.connect();

        t = new Thread() {
            @Override
            public void run() {
                try {
                    is = socket.getInputStream();
                    dis = new DataInputStream(is);
                    
                    while (true) {
                        try {
                            String msg = dis.readUTF();
                            RequestsPool reqPool = gson.fromJson(msg, RequestsPool.class);
                            for (Request req : reqPool.getRequests()) {
                                updateFrame(req);
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(ClientMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(ClientMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        t.start();
    }//GEN-LAST:event_ConnectActionPerformed

    public void updateFrame(Request request) {
        int reqType = request.getRequestType();
        switch (reqType) {
            case 0:
                System.out.println("res: " + request.toString());
                ClockHMPanel cphm = new ClockHMPanel(request.getWatchesID());
                cphm.preparePanel(request.getH(), request.getM());
                jPanel1.add(cphm);
                jPanel1.revalidate();
                break;
            case 1:
                System.out.println("res: " + request.toString());
                ClockHMSPanel cphms = new ClockHMSPanel(request.getWatchesID());
                cphms.preparePanel(request.getH(), request.getM(), request.getS());
                jPanel1.add(cphms);
                jPanel1.revalidate();
                break;
            case 10:
                System.out.println("res: " + request.toString());
                alarm();
                break;
            case 11:
                System.out.println("res: " + request.toString());
                
                for (Component c : jPanel1.getComponents()) {
                    if (c instanceof ClockHMSPanel) {
                        if (((ClockHMSPanel) c).id == request.getWatchesID()) {
                            ((ClockHMSPanel) c).setText(request.getH() + ":" + request.getM() + ":" + request.getS());
                        }
                    }
                    if (c instanceof ClockHMPanel) {
                        if (((ClockHMPanel) c).id == request.getWatchesID()) {
                            ((ClockHMPanel) c).setText(request.getH() + ":" + request.getM());
                        }
                    }
                };
        }
    }
    
    public void alarm() {
        Thread alarmThread = new Thread(() -> {
            System.out.println("ALARM!!!");
            System.out.println("ALARM!!!");
            System.out.println("ALARM!!!");
        
            JOptionPane.showMessageDialog(null, "Wake up!", "Alarm", JOptionPane.INFORMATION_MESSAGE);
        });
        alarmThread.start();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Connect;
    private lab_05.client.gui.ClockHMPanel clockHM;
    private lab_05.client.gui.ClockHMSPanel clockHMS;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables

}
